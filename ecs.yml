AWSTemplateFormatVersion: "2010-09-09"
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-09bee01cc997a78a6
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["-", [ECSLogGroup, !Ref "AWS::StackName"]]
      RetentionInDays: 14
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: "true"
          Image: "773910315572.dkr.ecr.us-east-1.amazonaws.com/cicd-nodeserver-ecs:latest"
          Name: "cicd-nodeserver-ecs"
          PortMappings:
            - ContainerPort: 3001
              HostPort: 3001
              Protocol: "tcp"
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      Family: "cicd-nodeserver-ecs"
      TaskRoleArn: "arn:aws:iam::773910315572:role/ecsTaskExecutionRole"
      ExecutionRoleArn: "arn:aws:iam::773910315572:role/ecsTaskExecutionRole"
      RequiresCompatibilities:
        - "EC2"
      Cpu: "128"
      Memory: "300"
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - "subnet-063dd014d61e4043d"
        - "subnet-042a18efa91c7a6aa"
      SecurityGroups:
        - "sg-06a897ab196e96c73"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref "ECSTG"
      LoadBalancerArn: !Ref "ECSALB"
      Port: "80"
      Protocol: HTTP
  ECSALBListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "ECSTG"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "ALBListener"
      Priority: 1
  ECSALBListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "ECSTG"
      Conditions:
        - Field: path-pattern
          Values: [/node_server]
      ListenerArn: !Ref "ALBListener"
      Priority: 2
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: ECSTG
      Port: 3001
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: vpc-05858b9e73e251b3a
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - "subnet-063dd014d61e4043d"
        - "subnet-042a18efa91c7a6aa"
      LaunchConfigurationName: !Ref "ContainerInstances"
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: 1
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
      SecurityGroups:
        - "sg-06a897ab196e96c73"
      InstanceType: t2.micro
      IamInstanceProfile: !Ref "EC2InstanceProfile"
      KeyName: us-east-1-key
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref "ECSCluster"
      DesiredCount: "1"
      LoadBalancers:
        - ContainerName: cicd-nodeserver-ecs
          ContainerPort: "3001"
          TargetGroupArn: !Ref "ECSTG"
      Role: !Ref "ECSServiceRole"
      TaskDefinition: !Ref "taskdefinition"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                  ]
                Resource: "*"
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId:
        !Join ["", [service/, !Ref "ECSCluster", /, !GetAtt [service, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref "ServiceScalingTarget"
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "10"
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: "60"
      AlarmActions: [!Ref "ServiceScalingPolicy"]
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt
            - ECSALB
            - LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ]
                Resource: "*"
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService",
                  ]
                Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref "EC2Role"]
  myDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: s-rostami.com.
      Comment: Zone apex alias targeted to ECSALB LoadBalancer.
      RecordSets:
        - Name: myapp.s-rostami.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "ECSALB.CanonicalHostedZoneID"
            DNSName: !GetAtt "ECSALB.DNSName"
Outputs:
  ecsservice:
    Value: !Ref "service"
  ecscluster:
    Value: !Ref "ECSCluster"
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ["", [!GetAtt [ECSALB, DNSName]]]
  taskdef:
    Value: !Ref "taskdefinition"
